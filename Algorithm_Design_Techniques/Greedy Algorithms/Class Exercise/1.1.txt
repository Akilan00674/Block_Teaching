Single File Programming Question
Problem Statement



You have recently been appointed as the program manager for a cricket stadium. Since it's a weekend, the stadium will be hosting multiple cricket matches throughout the day. Your goal is to organize and schedule as many matches as possible within the available time, keeping in mind that only one match can be played at a time on the ground.



Constraints:

Each match has a start time and an end time.

Once a match finishes, the ground becomes available immediately for the next match.

The maximum number of matches that need to be scheduled does not exceed 20.

You need to maximize the number of matches scheduled on the ground.

The matches should be scheduled in the order in which they are played.

The start and end times of each match are provided, and your task is to find the schedule that allows the maximum number of matches.



You are given a list of matches with their start and end times. Write a program that schedules the maximum number of non-overlapping cricket matches. The program should output the schedule of matches in the order in which they are played.

Example

Input

6

match1

1

2

match5

3

4

match4

0

6

match3

5

7

match6

8

9

match2

5

9

Output

Selected matches are:

match1 match5 match3 match6

Explanation

The shortest song is placed in the 0th index, followed by the second shortest song in the 1st index, and so on. Then the mean retrieval time is calculated.

Input format :
The first line contains an integer n â€“ the number of matches.

The next n lines contain the following information for each match:

A string name (up to 50 characters), representing the match name.
An integer stime represents the start time of the match.
An integer ftime represents the finish time of the match.
Output format :
The output prints the statement "Selected Activities are:".

Then, print the names of the selected matches in the order in which they are played, separated by spaces.



Refer to the sample Input and output for the formatting specifications

Sample test cases :
Input 1 :
 6
match1
1
2
match5
3
4
match4
0
6
match3
5
7
match6
8
9
match2
5
9
Output 1 :
Selected Activities are:
match1 match5 match3 match6 
Input 2 :
5
ride-1
3
5
ride-2
6
8
ride-3
1
4
ride-4
4
7
ride-5
7
10
Output 2 :
Selected Activities are:
ride-3 ride-4 ride-5 






#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;

struct Match {
    string name;
    int start;
    int finish;
};

bool compareFinish(const Match &a, const Match &b) {
    return a.finish < b.finish;
}

int main() {
    int n;
    cin >> n;
    vector<Match> matches(n);

    for (int i = 0; i < n; i++) {
        cin >> ws; // consume any leading whitespace
        getline(cin, matches[i].name);
        cin >> matches[i].start >> matches[i].finish;
    }

    sort(matches.begin(), matches.end(), compareFinish);

    vector<string> selected;
    int lastFinish = -1;

    for (auto &m : matches) {
        if (m.start >= lastFinish) {
            selected.push_back(m.name);
            lastFinish = m.finish;
        }
    }

    cout << "Selected Activities are:" << endl;
    for (auto &name : selected) cout << name << " ";
    cout << endl;

    return 0;
}








