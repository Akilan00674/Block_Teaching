Single File Programming Question
Problem Statement



You are given a knapsack with a maximum weight capacity of W and n objects. Each object i has a weight c[i] and a value v[i]. Your task is to fill the knapsack with objects in such a way that the total value of the objects in the knapsack is maximized without exceeding the weight capacity.



Implement a program to solve this problem using a simple greedy algorithm known as the Fractional Knapsack Problem.

Input format :
The first line of input consists of an integer n, representing the number of objects.

The second line of input consists of n integers, separated by a space, representing the weight of the object.

The third line of input consists of n integers, separated by a space, representing the value of the object.

The fourth line of input consists of an integer W, representing the maximum weight capacity of the knapsack.

Output format :
The output displays the following format:



For each step, it should print either:



"Added object X (Rs. Y, ZKg) completely in the bag. Space left: W." if the entire object X is added to the knapsack, where X is the object number, Rs. Y is the value of the object, ZKg is the weight of the object, and W is the remaining capacity of the knapsack as the integers.



"Added P% (Rs. Y, ZKg) of object X in the bag." if only a fraction of object X is added to the knapsack, where P% is the percentage of the object added, Rs. Y is the value of the object, ZKg is the weight of the object, and X is the object number as the integers.



Finally, it should print "Filled the bag with objects worth Rs. V." where Rs. V is the total value of the objects in the knapsack as the float-point numbers.



Refer to the sample output for the formatting specifications.

Code constraints :
1 ≤ n ≤ 10

1 ≤ c[i], v[i] ≤ 150

1 ≤ W ≤ 100

Sample test cases :
Input 1 :
3
10 20 30
60 100 120
50
Output 1 :
Added object 1 (Rs. 60, 10Kg) completely in the bag. Space left: 40.
Added object 2 (Rs. 100, 20Kg) completely in the bag. Space left: 20.
Added 66% (Rs.120, 30Kg) of object 3 in the bag.
Filled the bag with objects worth Rs. 240.00.



#include <iostream>
#include <vector>
#include <algorithm>
#include <iomanip>
using namespace std;

struct Item {
    int index;
    int weight;
    int value;
    double ratio;
};

bool compareRatio(const Item &a, const Item &b) {
    return a.ratio > b.ratio;
}

int main() {
    int n;
    cin >> n;
    vector<int> weights(n), values(n);
    for (int i = 0; i < n; i++) cin >> weights[i];
    for (int i = 0; i < n; i++) cin >> values[i];
    int W;
    cin >> W;

    vector<Item> items(n);
    for (int i = 0; i < n; i++) {
        items[i] = {i + 1, weights[i], values[i], (double)values[i] / weights[i]};
    }

    sort(items.begin(), items.end(), compareRatio);

    double totalValue = 0;
    int remaining = W;

    for (auto &it : items) {
        if (it.weight <= remaining) {
            cout << "Added object " << it.index << " (Rs. " << it.value << ", " << it.weight << "Kg) completely in the bag. Space left: " << remaining - it.weight << "." << endl;
            totalValue += it.value;
            remaining -= it.weight;
        } else if (remaining > 0) {
            double fraction = (double)remaining / it.weight;
            int perc = (int)(fraction * 100); // truncate to match expected output
            cout << "Added " << perc << "% (Rs." << it.value << ", " << it.weight << "Kg) of object " << it.index << " in the bag." << endl;
            totalValue += it.value * fraction;
            remaining = 0;
        }
        if (remaining == 0) break;
    }

    cout << fixed << setprecision(2);
    cout << "Filled the bag with objects worth Rs. " << totalValue << "." << endl;

    return 0;
}







