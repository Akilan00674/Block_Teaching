Single File Programming Question
Problem Statement



Jenny is currently fascinated by graph coloring algorithms and wants to understand the practical implementation of graph coloring. Develop a program that takes an undirected graph as input and assigns colors to its vertices in such a way that no two adjacent vertices have the same color. 



The graph is represented as an adjacency matrix. Helps Jenny in achieving this.

Input format :
The first line consists of an integer V, representing the number of vertices in the graph.

The next V lines consist of a pair of space-separated integers, each representing an edge between two connected vertices.

The input ends with -1, indicating the end of the input.

Output format :
For each vertex, the output prints a line indicating its assigned color in the format: "Vertex X - Color Y" where X represents the vertex number, and Y represents the color assigned to that vertex.



Refer to the sample output for the formatting specifications.

Code constraints :
1 ≤ V ≤ 50

Sample test cases :
Input 1 :
5
0 1
0 2
1 2
1 4
2 4
4 3
-1
Output 1 :
Vertex 0 - Color 0
Vertex 1 - Color 1
Vertex 2 - Color 2
Vertex 3 - Color 0
Vertex 4 - Color 3
Input 2 :
5
0 1
0 2
1 2
1 3
2 3
3 4
-1
Output 2 :
Vertex 0 - Color 0
Vertex 1 - Color 1
Vertex 2 - Color 2
Vertex 3 - Color 0
Vertex 4 - Color 1









#include <bits/stdc++.h>
using namespace std;

int main() {
    int V;
    cin >> V;

    vector<vector<int>> graph(V, vector<int>(V, 0));

    while (true) {
        int u, v;
        cin >> u;
        if (u == -1) break;
        cin >> v;
        graph[u][v] = 1;
        graph[v][u] = 1; // undirected
    }

    vector<int> result(V, -1);
    result[0] = 0;

    vector<bool> available(V, false);

    for (int u = 1; u < V; u++) {
        fill(available.begin(), available.end(), false);

        for (int i = 0; i < V; i++) {
            if (graph[u][i] && result[i] != -1)
                available[result[i]] = true;
        }

        int cr;
        for (cr = 0; cr < V; cr++) {
            if (!available[cr]) break;
        }
        result[u] = cr;
    }

    for (int u = 0; u < V; u++) {
        cout << "Vertex " << u << " - Color " << result[u] << endl;
    }

    return 0;
}
