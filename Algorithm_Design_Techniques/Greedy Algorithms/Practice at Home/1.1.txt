Single File Programming Question
Problem Statement



Josh is learning about the fractional knapsack problem. Given a set of items, each with a value and weight, along with a knapsack with a maximum capacity, he wants to maximize the total value of items he can fit into the knapsack. In fractional knapsack, he can take fractions of items.



Help Josh by writing a program that takes the number of items, their values, weights, and the capacity of the knapsack as input, and outputs the fractions of each item to be included in the knapsack to maximize its value.

Input format :
The first line of input is an integer 'n', denoting the number of items available.

The second line consists of 'n' integers representing the values of the items.

The third line consists of 'n' integers representing the weights of the items.

The fourth line is an integer 'capacity', indicating the capacity of the knapsack.

Output format :
The output displays n space-separated floating-point numbers, representing the fractions of each item to be included in the knapsack, rounded off to two decimal places.



Refer to the sample output for the formatting specifications.

Code constraints :
The given test cases fall under the following specifications:

1 ≤ n ≤ 10

1 ≤ values ≤ 100

1 ≤ weight ≤ 100

1 ≤ capacity ≤ 1000

Sample test cases :
Input 1 :
5
3 5 1 2 4
40 50 20 10 30
75
Output 1 :
0.00 0.70 0.00 1.00 1.00 









#include <bits/stdc++.h>
using namespace std;

struct Item {
    int value, weight, index;
    double ratio;
};

int main() {
    int n;
    cin >> n;
    vector<int> values(n), weights(n);
    for (int i = 0; i < n; i++) cin >> values[i];
    for (int i = 0; i < n; i++) cin >> weights[i];
    int capacity;
    cin >> capacity;

    vector<Item> items(n);
    for (int i = 0; i < n; i++) {
        items[i] = {values[i], weights[i], i, (double)values[i] / weights[i]};
    }

    sort(items.begin(), items.end(), [](Item &a, Item &b) {
        return a.ratio > b.ratio;
    });

    vector<double> fractions(n, 0.0);
    double totalValue = 0.0;

    for (int i = 0; i < n; i++) {
        if (capacity == 0) break;
        if (items[i].weight <= capacity) {
            fractions[items[i].index] = 1.0;
            capacity -= items[i].weight;
            totalValue += items[i].value;
        } else {
            fractions[items[i].index] = (double)capacity / items[i].weight;
            totalValue += items[i].value * fractions[items[i].index];
            capacity = 0;
        }
    }

    for (int i = 0; i < n; i++) {
        cout << fixed << setprecision(2) << fractions[i];
        if (i < n - 1) cout << " ";
    }
    return 0;
}
