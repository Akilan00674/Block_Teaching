Single File Programming Question
Problem Statement



Yuvana is working on a graph coloring problem where he needs to color the vertices of a graph such that no two adjacent vertices have the same color, using a limited number of colors. The graph is represented by an adjacency matrix where a value of 1 indicates an edge between two vertices, and 0 indicates no edge. 



Your task is to help Yuvana to implement a program that will take the number of vertices, the adjacency matrix of the graph, and the number of colors available, then determine if it's possible to color the graph accordingly. If a solution is possible, the program should display the colors of each vertex; otherwise, it should indicate that no solution exists.

Input format :
The first line of input consists of an integer V, representing the number of vertices in the graph.

Next, V lines follow, each containing V space-separated integers representing the adjacency matrix of the graph. Each integer is either 0 (no edge) or 1 (edge present).

The last line of input consists of an integer C, representing the number of colors available for coloring.

Output format :
The first line of output should print "Solution exists" if the rooms can be colored with the given number of colors.

After that, print the colors assigned to each room in the format: Colors: [color1, color2, color3, ..., colorV], where each colorX represents the color assigned to the room X.

If it's not possible to color the rooms with the given number of colors, print: No solution



Refer to the sample output for the formatting specifications.

Code constraints :
In this scenario, the given test cases will fall under the following constraints:

1 ≤ V ≤ 10

1 ≤ C ≤ V

Sample test cases :
Input 1 :
10
0 1 0 0 0 1 0 0 0 0
1 0 1 0 0 0 1 0 0 0
0 1 0 1 0 0 0 1 0 0
0 0 1 0 1 0 0 0 1 0
1 0 0 1 0 0 0 0 0 1
1 0 0 0 0 0 0 1 1 0
0 1 0 0 0 0 0 0 1 1
0 0 1 0 0 1 0 0 0 1
0 0 0 1 0 1 1 0 0 0
0 0 0 0 1 0 1 1 0 0
3
Output 1 :
Solution exists
Colors: [1, 2, 1, 2, 3, 2, 1, 3, 3, 2]
Input 2 :
3
0 1 1
1 0 1
1 1 0
3
Output 2 :
Solution exists
Colors: [1, 2, 3]
Input 3 :
2
0 1
1 0
1
Output 3 :
No solution







#include <bits/stdc++.h>
using namespace std;

bool isSafe(int v, const vector<vector<int>>& graph, const vector<int>& color, int c, int V) {
    for (int i = 0; i < V; ++i)
        if (graph[v][i] == 1 && color[i] == c) return false;
    return true;
}

bool colorUtil(const vector<vector<int>>& graph, int V, int C, vector<int>& color, int v) {
    if (v == V) return true;
    for (int c = 1; c <= C; ++c) {
        if (isSafe(v, graph, color, c, V)) {
            color[v] = c;
            if (colorUtil(graph, V, C, color, v + 1)) return true;
            color[v] = 0;
        }
    }
    return false;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    int V;
    if (!(cin >> V)) return 0;
    vector<vector<int>> graph(V, vector<int>(V));
    for (int i = 0; i < V; ++i)
        for (int j = 0; j < V; ++j)
            cin >> graph[i][j];
    int C;
    cin >> C;
    vector<int> color(V, 0);
    if (colorUtil(graph, V, C, color, 0)) {
        cout << "Solution exists\n";
        cout << "Colors: [";
        for (int i = 0; i < V; ++i) {
            cout << color[i];
            if (i < V - 1) cout << ", ";
        }
        cout << "]\n";
    } else {
        cout << "No solution\n";
    }
    return 0;//select c++ in option
}
