Single File Programming Question
Problem Statement﻿



Alice found a mysterious text while wandering in Wonderland. She is curious to know how many times a given word appears in the text. 



Your task is to help Alice count the occurrences of the given word in the text using the Rabin-Karp algorithm.

Input format :
The first line contains a string N, representing the intercepted text.

The second line contains a string M, representing the word Alice wants to count.



Both N and M consist only of lowercase and uppercase English letters ('a' to 'z', 'A' to 'Z') and spaces.

Output format :
The output displays a single integer representing the number of times M appears as a substring in N.



Refer to the sample output for the formatting specifications.﻿

Code constraints :
1 ≤ N.length ≤ 500

1 ≤ M.length ≤ N.length

Both N and M contain only English letters (A-Z, a-z) and spaces.

Sample test cases :
Input 1 :
hello hello world hello
hello
Output 1 :
3
Input 2 :
ababababa
aba
Output 2 :
4
Input 3 :
abcdefg
xyz
Output 3 :
0



#include <bits/stdc++.h>
using namespace std;

int main() {
    string txt, pat;
    getline(cin, txt);
    getline(cin, pat);

    int n = txt.size();
    int m = pat.size();

    if (m > n) {
        cout << 0;
        return 0;
    }

    const int d = 256;   
    const int q = 101;   // prime number for modulus to avoid overflow

    int h = 1;
    for (int i = 0; i < m - 1; i++)
        h = (h * d) % q;

    int p = 0, t = 0;
    for (int i = 0; i < m; i++) {
        p = (d * p + pat[i]) % q;
        t = (d * t + txt[i]) % q;
    }

    int count = 0;
    for (int i = 0; i <= n - m; i++) {
        if (p == t) {
            if (txt.substr(i, m) == pat) {
                count++;
            }
        }
        if (i < n - m) {
            t = (d * (t - txt[i] * h) + txt[i + m]) % q;
            if (t < 0) t += q;
        }
    }

    cout << count;
    return 0;
}







