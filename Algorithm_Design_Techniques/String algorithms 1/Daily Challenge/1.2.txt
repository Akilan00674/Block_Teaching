Single File Programming Question
Problem Statement



Given a text string (txt) and a pattern string (pat), the task is to find all occurrences of the pattern in the text using the Naive Pattern Searching algorithm. The Naive Pattern Searching algorithm compares the pattern with every possible substring of the text to find matches.

Input format :
The first line of input consists of string txt representing the text string.

The second line of input consists of string pat representing the pattern string.

Output format :
The program prints the indices where the pattern is found in the text.

If the pattern is not found, it prints "Pattern not found in the text."



ï»¿Refer to the sample output for the formatting specifications.



Code constraints :
The input strings (txt) and (pat) consist of lowercase and/or uppercase letters.

The maximum length of the input strings is 105.

The pattern should not be empty (i.e., its length should be greater than zero).

Sample test cases :
Input 1 :
AABAACAADAABAAABAA
AABA
Output 1 :
Pattern found at index 0
Pattern found at index 9
Pattern found at index 13
Input 2 :
Hello World
World
Output 2 :
Pattern found at index 6
Input 3 :
The quick brown fox jumps over the lazy dog
OpenAI
Output 3 :
Pattern not found in the te










#include <bits/stdc++.h>
using namespace std;

int main() {
    string txt, pat;
    getline(cin, txt);
    getline(cin, pat);

    int n = txt.size();
    int m = pat.size();

    vector<int> indices;

    for (int i = 0; i <= n - m; i++) {
        int j = 0;
        while (j < m && txt[i + j] == pat[j])
            j++;
        if (j == m)
            indices.push_back(i);
    }

    if (indices.empty()) {
        cout << "Pattern not found in the text." << endl;
    } else {
        for (int idx : indices) {
            cout << "Pattern found at index " << idx << endl;
        }
    }

    return 0;
}
