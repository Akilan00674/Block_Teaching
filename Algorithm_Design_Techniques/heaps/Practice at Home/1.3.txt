Single File Programming Question
Problem Statement



You are working with a charity organization that receives a stream of donations from different donors. Your task is to develop a program that finds the Kth largest donation amount received so far. To achieve this, you decide to implement the heap sort approach.



Write a program that takes the number of donations, the donation amounts, and an integer K as inputs. The program should use the max-heap sort approach to find and output the Kth largest donation amount from the array of donations.

Input format :
The first line of input consists of an integer n, representing the number of donations.

The second line consists of n space-separated integers, representing the donation amounts, each donation amount is a positive integer.

The third line consists of integer K, representing the Kth largest donation amount to find.

Output format :
If the value of K is invalid (K > n or K <= 0), output "Invalid K value."

Otherwise, output a single line containing the Kth largest donation amount.



Refer to the sample output for the exact format.

Code constraints :
The given test cases fall under the following constraints:

1 ≤ n ≤ 100

1 ≤ donation amount ≤ 10,000

1 ≤ K ≤ n

Sample test cases :
Input 1 :
5
50 30 70 10 90
5
Output 1 :
The 5th largest donation amount is: 10
Input 2 :
7
15 25 10 40 30 20 5
4
Output 2 :
The 4th largest donation amount is: 20
Input 3 :
6
15 25 10 40 30 20 
7
Output 3 :
Invalid K value.









#include <iostream>
#include <vector>
using namespace std;

void heapify(vector<int> &arr, int n, int i) {
    int largest = i;
    int left = 2*i + 1;
    int right = 2*i + 2;

    if (left < n && arr[left] > arr[largest]) largest = left;
    if (right < n && arr[right] > arr[largest]) largest = right;

    if (largest != i) {
        swap(arr[i], arr[largest]);
        heapify(arr, n, largest);
    }
}

void buildMaxHeap(vector<int> &arr) {
    int n = arr.size();
    for (int i = n/2 - 1; i >= 0; i--) heapify(arr, n, i);
}

int main() {
    int n;
    cin >> n;
    vector<int> donations(n);
    for (int i = 0; i < n; i++) cin >> donations[i];

    int K;
    cin >> K;

    if (K <= 0 || K > n) {
        cout << "Invalid K value." << endl;
        return 0;
    }

    buildMaxHeap(donations);

    int size = n;
    for (int i = 0; i < K-1; i++) {
        swap(donations[0], donations[size-1]);
        size--;
        heapify(donations, size, 0);
    }

    cout << "The " << K << "th largest donation amount is: " << donations[0] << endl;

    return 0;
}
