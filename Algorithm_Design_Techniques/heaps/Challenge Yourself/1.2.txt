Single File Programming Question
Problem Statement



In a game leaderboard system, Alex tracks player scores using a Min Heap to efficiently manage rankings. The Min Heap ensures that the lowest score is always at the root. After all scores have been added, Alex must identify the next prime number greater than the most recently added score (the last inserted score after the Min Heap is built).



Write a program to assist Alex with the following tasks:

Insert player scores into a Min Heap.
Display the elements of the Min Heap.
Find and display the next prime number greater than the last inserted score after constructing the Min Heap.
Input format :
The first line contains an integer n, representing the number of scores to insert into the Min Heap.

The second line contains n space-separated integers, representing the player scores to be inserted.

Output format :
The first line should display the scores in the Min Heap, separated by spaces.

The second line should display the next prime number greater than the last inserted score after the Min Heap has been constructed.



Refer to the sample output for the formatting specifications.

Code constraints :
1 ≤ n ≤ 10

1 ≤ scores ≤ 50

Sample test cases :
Input 1 :
5
3 9 2 6 8
Output 1 :
2 6 3 9 8 
11
Input 2 :
8
25 15 17 32 23 5 12 8
Output 2 :
5 8 12 23 25 17 15 32 
37








#include <iostream>
#include <vector>
#include <cmath>
using namespace std;

void heapifyUp(vector<int> &heap, int index) {
    while (index > 0) {
        int parent = (index - 1) / 2;
        if (heap[parent] > heap[index]) {
            swap(heap[parent], heap[index]);
            index = parent;
        } else break;
    }
}

bool isPrime(int num) {
    if (num < 2) return false;
    for (int i = 2; i*i <= num; i++) {
        if (num % i == 0) return false;
    }
    return true;
}

int nextPrime(int num) {
    int candidate = num + 1;
    while (!isPrime(candidate)) candidate++;
    return candidate;
}

int main() {
    int n;
    cin >> n;
    vector<int> heap;

    for (int i = 0; i < n; i++) {
        int score;
        cin >> score;
        heap.push_back(score);
        heapifyUp(heap, heap.size() - 1);
    }

    for (int x : heap) cout << x << " ";
    cout << endl;

    int lastHeapScore = heap.back(); // last element after heap is built
    cout << nextPrime(lastHeapScore) << endl;

    return 0;
}
