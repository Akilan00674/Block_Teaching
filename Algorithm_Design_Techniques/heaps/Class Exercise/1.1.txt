Single File Programming Question
Problem Statement



Emma is designing a task scheduling system that prioritizes tasks using a Min Heap. The system must:



Build a Min Heap based on user-provided task priorities.
Calculate twice the priority of the root task.
Remove all tasks with priorities less than twice the root task’s priority.
Display the remaining tasks while ensuring the Min Heap property is preserved (Level order traversal).
Input format :
The first line contains an integer n, representing the number of tasks prioritized in the Min Heap.

The second line contains n space-separated integers, representing the priority levels of the tasks to be added to the Min Heap.

Output format :
The output is a single line containing the remaining task priorities in the Min Heap after removing tasks with priorities less than twice the root task’s priority, separated by a space.



Refer to the sample output for the formatting specifications.

Code constraints :
1 ≤ n ≤ 20

1 ≤ priority values ≤ 1000

Sample test cases :
Input 1 :
7
4 8 6 15 12 10 14
Output 1 :
8 10 12 15 14 
Input 2 :
4
2 4 3 6
Output 2 :
4 6 






#include <bits/stdc++.h>
using namespace std;

void heapify(vector<int>& heap, int n, int i) {
    int smallest = i;
    int l = 2 * i + 1;
    int r = 2 * i + 2;

    if (l < n && heap[l] < heap[smallest])
        smallest = l;
    if (r < n && heap[r] < heap[smallest])
        smallest = r;
    if (smallest != i) {
        swap(heap[i], heap[smallest]);
        heapify(heap, n, smallest);
    }
}

void buildMinHeap(vector<int>& heap) {
    int n = heap.size();
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(heap, n, i);
}

int main() {
    int n;
    cin >> n;
    vector<int> heap(n);
    for (int i = 0; i < n; i++)
        cin >> heap[i];

    buildMinHeap(heap);

    int threshold = 2 * heap[0];

    vector<int> filtered;
    for (int val : heap)
        if (val >= threshold)
            filtered.push_back(val);

    if (!filtered.empty())
        buildMinHeap(filtered);

    for (int i = 0; i < filtered.size(); i++) {
        if (i) cout << " ";
        cout << filtered[i];
    }

    return 0;
}
