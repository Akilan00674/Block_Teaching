ts of a single integer n, representing the number of gems.

Output format :
For each gem inserted, display a line in the format:

Insert <gem_size>: <current_heap>

Here, <gem_size> is the size of the gem being inserted, and <current_heap> is the list of gem sizes in Max Heap order after the insertion.



Refer to the sample output for the formatting specifications.

Code constraints :
The given test cases fall under the following constraints:

1 ≤ n ≤ 10

Sample test cases :
Input 1 :
5
Output 1 :
Insert 2: 2 
Insert 3: 3 2 
Insert 5: 5 2 3 
Insert 8: 8 5 3 2 
Insert 13: 13 8 3 2 5 
Input 2 :
3
Output 2 :
Insert 2: 2 
Insert 3: 3 2 
Insert 5: 5 2 3 
Input 3 :
1
Output 3 :
Insert 2: 2 



#include <iostream>
#include <vector>
using namespace std;

void heapifyUp(vector<int> &heap, int index) {
    while (index > 0) {
        int parent = (index - 1) / 2;
        if (heap[parent] < heap[index]) {
            swap(heap[parent], heap[index]);
            index = parent;
        } else {
            break;
        }
    }
}

void printHeap(const vector<int> &heap) {
    for (int w : heap) cout << w << " ";
    cout << endl;
}

int main() {
    int n;
    cin >> n;
    vector<int> heap;
    
    int a = 2, b = 3;
    for (int i = 0; i < n; ++i) {
        int gem;
        if (i == 0) gem = 2;
        else if (i == 1) gem = 3;
        else gem = a + b, a = b, b = gem;

        heap.push_back(gem);
        heapifyUp(heap, heap.size() - 1);
        cout << "Insert " << gem << ": ";
        printHeap(heap);
    }

    return 0;
}
