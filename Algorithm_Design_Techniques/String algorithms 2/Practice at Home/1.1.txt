Single File Programming Question
Problem Statement



Dr. Rhea is a bioinformatics researcher working on a DNA analysis tool to help geneticists identify specific gene patterns quickly from large DNA sequences. These patterns can help detect genetic markers related to hereditary diseases.



As part of the development team, Rhea is assigned the task of creating a module that efficiently searches for all occurrences of a given DNA pattern within a long DNA sequence. To handle this task efficiently - especially for large datasets - she decides to use the Boyer-Moore string matching algorithm, which is well-suited for such problems due to its ability to skip sections of the text, making the search faster.

Input format :
The first line of input contains a string representing the DNA sequence s consisting of uppercase characters A, C, G, and T.

The second line of input contains a string representing the pattern p consisting of uppercase characters A, C, G, and T.

Output format :
If the pattern occurs in the DNA sequence, print the 0-based starting indices of all its occurrences, separated by spaces.

If the pattern does not occur, print:

"Pattern not found in DNA sequence."



Refer to the sample output for formatting specifications.

Code constraints :
1 ≤ |s| ≤ 105

1 ≤ |p| ≤ 103

Sample test cases :
Input 1 :
AGCTTAGCTAAGCTA  
AGCTA
Output 1 :
Found at indices: 5 10 
Input 2 :
ACGTAGT
TGCA
Output 2 :
Pattern not found in DNA sequence.
Input 3 :
TTTTTT  
TT
Output 3 :
Found at indices: 0 1 2 3 4







#include <bits/stdc++.h>
using namespace std;

// Preprocess bad character heuristic
void badCharHeuristic(const string &pat, vector<int> &badChar) {
    int m = pat.size();
    for (int i = 0; i < 256; i++) badChar[i] = -1;
    for (int i = 0; i < m; i++) badChar[(int)pat[i]] = i;
}

vector<int> boyerMooreSearch(const string &txt, const string &pat) {
    int n = txt.size();
    int m = pat.size();
    vector<int> indices;

    if (m == 0 || n < m) return indices;

    vector<int> badChar(256);
    badCharHeuristic(pat, badChar);

    int s = 0;
    while (s <= n - m) {
        int j = m - 1;

        while (j >= 0 && pat[j] == txt[s + j])
            j--;

        if (j < 0) {
            indices.push_back(s);
            s += (s + m < n) ? m - badChar[txt[s + m]] : 1;
        } else {
            s += max(1, j - badChar[txt[s + j]]);
        }
    }

    return indices;
}

int main() {
    string dna, pattern;
    getline(cin, dna);
    getline(cin, pattern);

    vector<int> result = boyerMooreSearch(dna, pattern);

    if (result.empty()) {
        cout << "Pattern not found in DNA sequence." << endl;
    } else {
        cout << "Found at indices: ";
        for (int idx : result) cout << idx << " ";
        cout << endl;
    }

    return 0;
}
