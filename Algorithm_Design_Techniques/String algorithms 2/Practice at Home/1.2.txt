Single File Programming Question
Problem Statement



Arv is developing a text processing tool that requires efficient string-matching capabilities. He needs to implement the Knuth-Morris-Pratt (KMP) algorithm to find occurrences of a given pattern within a text.



Write a program to implement the KMP algorithm, which takes as input a text and a pattern from the user. The program should then search for all occurrences of the pattern within the text and print the indices at which each occurrence begins.

Input format :
The first line contains a string representing the text.

The second line contains a string representing the pattern.

Output format :
The output displays the following format:

For each occurrence of the pattern within the text, print the starting index (0-based) of the occurrence in the text in the format:

"Pattern found at index [index_value]".

If the pattern is not found, print the "Pattern not found".



Refer to the sample output for the formatting specifications.

Code constraints :
1 ≤ N ≤ 100

1 ≤ M ≤ 75

The input strings should be case-sensitive.

The index starts from 0.

Sample test cases :
Input 1 :
ABABDABACDABABCABAB
ABABCABAB
Output 1 :
Pattern found at index 10
Input 2 :
abbbabbbabb
xyz
Output 2 :
Pattern not found
Input 3 :
abababababa
ab
Output 3 :
Pattern found at index 0
Pattern found at index 2
Pattern found at index 4
Pattern found at index 6
Pattern found at index 8






#include <bits/stdc++.h>
using namespace std;

// Build LPS (Longest Prefix Suffix) array
vector<int> computeLPS(const string &pat) {
    int m = pat.size();
    vector<int> lps(m, 0);
    int len = 0;
    int i = 1;

    while (i < m) {
        if (pat[i] == pat[len]) {
            len++;
            lps[i] = len;
            i++;
        } else {
            if (len != 0) {
                len = lps[len - 1];
            } else {
                lps[i] = 0;
                i++;
            }
        }
    }
    return lps;
}

void KMPSearch(const string &txt, const string &pat) {
    int n = txt.size();
    int m = pat.size();
    vector<int> lps = computeLPS(pat);

    int i = 0, j = 0;
    bool found = false;

    while (i < n) {
        if (txt[i] == pat[j]) {
            i++;
            j++;
        }
        if (j == m) {
            cout << "Pattern found at index " << i - j << endl;
            found = true;
            j = lps[j - 1];
        } else if (i < n && txt[i] != pat[j]) {
            if (j != 0)
                j = lps[j - 1];
            else
                i++;
        }
    }

    if (!found) cout << "Pattern not found" << endl;
}

int main() {
    string text, pattern;
    getline(cin, text);
    getline(cin, pattern);

    KMPSearch(text, pattern);

    return 0;
}
