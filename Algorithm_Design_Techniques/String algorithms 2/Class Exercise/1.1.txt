Single File Programming Question
Problem Statement

ï»¿

Lily, a software engineer, needs to find all occurrences of a specific pattern in a larger text for her text analysis project. 



Given two strings txt (the text) and pat (the pattern) of sizes N and M respectively, where N > M, help Lily by printing all starting indices of the pattern in the text using the KMP algorithm. 

Input format :
The first line of input consists of a string representing the text.

The second line consists of a string representing the pattern.

Output format :
The output prints the starting indices of all occurrences of the pattern in the text, using 0-based indexing.



Refer to the sample output for formatting specifications.

Code constraints :
The input consists of uppercase, lowercase alphabets and spaces (case-sensitive).

Sample test cases :
Input 1 :
sunshine
sun
Output 1 :
Found pattern at index 0
Input 2 :
AABAACAADAABAABA
AABA
Output 2 :
Found pattern at index 0
Found pattern at index 9
Found pattern at index 12
Input 3 :
This is a test text
test
Output 3 :
Found pattern at index 10







#include <bits/stdc++.h>
using namespace std;

// Function to compute LPS array
vector<int> computeLPS(const string &pat) {
    int m = pat.size();
    vector<int> lps(m, 0);
    int len = 0;
    int i = 1;
    while (i < m) {
        if (pat[i] == pat[len]) {
            len++;
            lps[i] = len;
            i++;
        } else {
            if (len != 0)
                len = lps[len - 1];
            else {
                lps[i] = 0;
                i++;
            }
        }
    }
    return lps;
}

int main() {
    string txt, pat;
    getline(cin, txt);
    getline(cin, pat);

    int n = txt.size();
    int m = pat.size();

    vector<int> lps = computeLPS(pat);

    int i = 0, j = 0;
    while (i < n) {
        if (txt[i] == pat[j]) {
            i++;
            j++;
        }
        if (j == m) {
            cout << "Found pattern at index " << i - j << endl;
            j = lps[j - 1];
        } else if (i < n && txt[i] != pat[j]) {
            if (j != 0)
                j = lps[j - 1];
            else
                i++;
        }
    }

    return 0;
}
