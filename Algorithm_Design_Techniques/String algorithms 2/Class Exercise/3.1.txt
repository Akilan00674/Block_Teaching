Single File Programming Question
Problem Statement



Jinu is working on a project where he needs to efficiently search for a pattern within a given text. He wants to implement a program that can count the occurrences of a pattern within the provided text using the Boyer-Moore algorithm.



Write a program to help Jinu implement this pattern-searching functionality. The program should take a text string and a pattern string as input, and it should output the count of occurrences of the pattern within the text.

Input format :
The first line of input contains a text string, text, consisting of printable ASCII characters.

The second line of input contains a pattern string, pattern, consisting of printable ASCII characters.

Output format :
The output prints a single integer representing the count of occurrences of the pattern within the given text.



Refer to the sample output for formatting specifications.

Code constraints :
The given test cases fall under the following specifications:

The length of text will not exceed 100 characters.

The length of pattern will not exceed 100 characters.

The input string must be case-sensitive.

Sample test cases :
Input 1 :
ababababa
ab
Output 1 :
4
Input 2 :
Hello, how are you doing? How is everything going?
How
Output 2 :
1



#include <bits/stdc++.h>
using namespace std;

// Preprocess for bad character heuristic
void badCharHeuristic(const string &pat, vector<int> &badChar) {
    int m = pat.size();
    for (int i = 0; i < 256; i++) badChar[i] = -1;
    for (int i = 0; i < m; i++) badChar[(int)pat[i]] = i;
}

int boyerMooreCount(const string &txt, const string &pat) {
    int n = txt.size();
    int m = pat.size();
    if (m == 0 || n < m) return 0;

    vector<int> badChar(256);
    badCharHeuristic(pat, badChar);

    int count = 0;
    int s = 0; // shift of pattern with respect to text
    while (s <= (n - m)) {
        int j = m - 1;

        while (j >= 0 && pat[j] == txt[s + j])
            j--;

        if (j < 0) {
            count++;
            s += (s + m < n) ? m - badChar[txt[s + m]] : 1;
        } else {
            s += max(1, j - badChar[txt[s + j]]);
        }
    }
    return count;
}

int main() {
    string txt, pat;
    getline(cin, txt);
    getline(cin, pat);

    cout << boyerMooreCount(txt, pat) << endl;
    return 0;
}






