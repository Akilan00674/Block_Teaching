Single File Programming Question
Problem Statement



Amy is developing a program that takes an adjacency matrix as input, representing an undirected graph. The goal is to determine the chromatic number of the graph, number of a graph is the minimum number of colors needed to color the vertices of the graph in such a way that no two adjacent vertices share the same color.



Help Amy with the practical implementation of chromatic numbers, understanding how the algorithm efficiently assigns colors to vertices to ensure adjacent vertices have distinct colors. 

Input format :
The first line contains an integer v, representing the number of vertices in the graph.

The next v lines contain the adjacency matrix of the graph, where each line contains v space-separated integers (0 or 1).

Output format :
The output prints "Chromatic Number of the graph is: " followed by an integer representing the chromatic number of the graph.



Refer to the sample output for the formatting specifications.

Code constraints :
1 ≤ v ≤ 50

Sample test cases :
Input 1 :
4
0 1 1 1
1 0 1 0
1 1 0 1
1 0 1 0
Output 1 :
Chromatic Number of the graph is: 3
Input 2 :
5
0 1 0 1 0
1 0 1 0 1
0 1 0 1 0
1 0 1 0 1
0 1 0 1 0
Output 2 :
Chromatic Number of the graph is: 2
Input 3 :
5
0 1 1 0 0
1 0 1 1 0
1 1 0 1 1
0 1 1 0 1
0 0 1 1 0
Output 3 :
Chromatic Number of the graph is: 3




#include <bits/stdc++.h>
using namespace std;

int main() {
    int v;
    cin >> v;
    vector<vector<int>> graph(v, vector<int>(v));
    
    for (int i = 0; i < v; i++) {
        for (int j = 0; j < v; j++) {
            cin >> graph[i][j];
        }
    }

    vector<int> result(v, -1);
    result[0] = 0; // first vertex -> first color

    vector<bool> available(v, false);

    for (int u = 1; u < v; u++) {
        fill(available.begin(), available.end(), false);

        // mark adjacent colors as unavailable
        for (int i = 0; i < v; i++) {
            if (graph[u][i] && result[i] != -1) {
                available[result[i]] = true;
            }
        }

        int cr;
        for (cr = 0; cr < v; cr++) {
            if (!available[cr]) break;
        }

        result[u] = cr;
    }

    int chromaticNumber = *max_element(result.begin(), result.end()) + 1;

    cout << "Chromatic Number of the graph is: " << chromaticNumber << "\n";
    return 0;
}
